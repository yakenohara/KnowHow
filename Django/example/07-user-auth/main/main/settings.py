"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from common.const import STR_LOG_FOLDER_NAME, STR_LOG_FILE_NAME_INFO, STR_LOG_FILE_NAME_WARNING, STR_LOG_FILE_NAME_ERROR

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ログ保存用ディレクトリの作成
str_logDirectory = os.path.join(BASE_DIR, STR_LOG_FOLDER_NAME)
if not os.path.exists(str_logDirectory): # ディレクトリが存在しない場合
    os.mkdir(str_logDirectory) # ディレクトリ作成

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#dt17u1_)t-lh8%$8oc60e2l80#l7a5qj7#onf37%nffm4n%=*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap5', # テンプレートファイル内で `{% load django_bootstrap5 %}` するなら左記のように追記
    'widget_tweaks', # テンプレートファイル内で `{% load widget_tweaks %}` するなら左記のように追記
    'editors', # `~python.exe manage.py startapp xxx` で作成したアプリ名
    'accounts',
    'index',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.LoginRequiredMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # PJ 配下の `templates` ディレクトリを、テンプレートが配置されたディレクトリとして認識させる
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-STATICFILES_DIRS

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"), # PJ 配下の `static` ディレクトリを、テンプレートが使用するCSS ファイルや JavaScript ファイルが配置されたディレクトリとして認識させる
]

# ログ出力設定
# <Pythonインストールパス>/Lib/site-packages/django/utils/log.py の `DEFAULT_LOGGING` を
# `LOGGING` としてここに定義すると、設定をオーバーライドできる。
# 
# https://docs.djangoproject.com/en/4.0/ref/logging/

LOGGING = {
    'version': 1, # 必須項目かつ有効な値は 1 のみ https://docs.python.org/ja/3/library/logging.config.html#dictionary-schema-details
    'disable_existing_loggers': False, # 公式ドキュメントの `DEFAULT_LOGGING` のまま `False` にしておく

    # 出力フォーマット定義
    'formatters': {
        'simple': { # 'simple' という名称のフォーマットを定義
            # 使用可能な属性は以下参照
            # https://docs.python.org/ja/3/library/logging.html#logrecord-attributes
            'format': "%(asctime)s [%(levelname)s] %(message)s"
        },
    },

    # ログの出力先を設定する（標準出力、ファイル、メール等
    # この設定のことをハンドラーという。  
    'handlers': {
        'info': { # 'info' という名称のハンドラーを定義
            'level': 'INFO', # ログレベル
            'class': 'logging.FileHandler', # https://docs.python.org/ja/3/library/logging.handlers.html#filehandler
            'filename': os.path.join(BASE_DIR, STR_LOG_FOLDER_NAME, STR_LOG_FILE_NAME_INFO),
            'encoding': 'utf-8',
            'formatter': 'simple', # 'simple' という名称のフォーマットを使用
        },
        'warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, STR_LOG_FOLDER_NAME, STR_LOG_FILE_NAME_WARNING),
            'encoding': 'utf-8',
            'formatter': 'simple',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, STR_LOG_FOLDER_NAME, STR_LOG_FILE_NAME_ERROR),
            'encoding': 'utf-8',
            'formatter': 'simple',
        },
    },

    # アプリケーション毎に異なるハンドラー定義を行う場合は、以下の様に定義
    # 'loggers': {
    #     'django.server': {
    #         'handlers': ['info', 'mail_admins'],
    #         'level': 'INFO',
    #     },
    #     'django': {
    #         'handlers': ['django.server'],
    #         'level': 'INFO',
    #         'propagate': False,
    #         # 
    #         # note
    #         # `'propagate': False` すると、上位の定義に伝搬させない。
    #         # この場合の親子関係は、親-> 子 -> 孫 の順に、以下のようになる
    #         # `root` -> `django` -> `django.server`
    #         # 例えば、以下のような実装を行うと
    #         # ```
    #         # logger = logging.getLogger("django.server")
    #         # logger.info("hoge")
    #         # ```
    #         # ```
    #     },
    # },
    'root': {
        'handlers': ['info', 'warning', 'error'],
        'level': 'INFO', # ログレベル
    },
}

# `login_required()` デコレーターでログインされていないことがわかった場合のリダイレクト先
# https://docs.djangoproject.com/en/4.0/ref/settings/#login-url

LOGIN_URL = '/accounts/login/'

# `LoginView` でログインした後のリダイレクト先
# https://docs.djangoproject.com/en/4.0/ref/settings/#login-redirect-url

LOGIN_REDIRECT_URL = '/'

# `LogoutView` でログアウトした後のリダイレクト先
# https://docs.djangoproject.com/en/4.0/ref/settings/#logout-redirect-url

LOGOUT_REDIRECT_URL = '/accounts/login/'

# ログインが不要な URL 文字列の正規表現一覧
STR_URL_EXCEPTION_THAT_REQUIRES_LOGIN = [
    r'/accounts/login/(.*)$',
    r'/accounts/signup/(.*)$',
]
